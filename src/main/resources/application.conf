spotify {
    client_id=YourClientID
    # Override client_id with system/environment variable
    client_id=${?SPOTIFY_CLIENT_ID}

    client_secret=YourClientSecret
    # Override client_secret with system/environment variable
    client_secret=${?SPOTIFY_CLIENT_SECRET}

    redirect_uri=${?SPOTIFY_REDIRECT_URI}

    service {
        artist_cache_size=500
        artist_cache_size=${?ARTIST_CACHE_SIZE}
        album_cache_size=500
        album_cache_size=${?ALBUM_CACHE_SIZE}
        user_cache_size=5000
        user_cache_size=${?USER_CACHE_SIZE}
        playlist_cache_size=100
        playlist_cache_size=${?PLAYLIST_CACHE_SIZE}
        liked_songs_cache_size=1000
        liked_songs_cache_size=${?LIKED_SONGS_CACHE_SIZE}
    }
}

db {
    database=muse
    database=${?PGDATABASE}
    host=localhost
    host=${?PGHOST}
    port=5432
    port=${?PGPORT}
    user=postgres
    user=${?PGUSER}
    password=password
    password=${?PGPASSWORD}
}

redis {
    host=localhost
    host=${?REDIS_HOST}
    port=6379
    port=${?REDIS_PORT}
    username=default
    username=${?REDIS_USERNAME}
    password=${?REDIS_PASSWORD}
}

server {
    domain=${?MUSE_DOMAIN}

    frontend_url="http://localhost:3000"
    frontend_url=${?FRONTEND_URL}

    port=8883
    port=${?SERVER_PORT}

    schema_file="src/main/resources/graphql/schema.graphql"

    # Number of event loop threads.
    n_threads=16
}

database {
    connectionTimeout=30000
    dataSourceClassName=org.postgresql.ds.PGSimpleDataSource
    dataSource {
        serverName=${db.host}
        # Used in docker-compose because postgres runs in container. Can't use localhost.
        serverName=${?DATA_SOURCE_SERVER_NAME}
        portNumber=${db.port}
        user=${db.user}
        password=${db.password}
        databaseName=${db.database}
    }
}