schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

"An instantaneous point on the time-line represented by a standard date time string"
scalar Instant

scalar Long

union ReviewUpdate = CreatedComment | DeletedComment | UpdatedComment | UpdatedCommentIndex

enum AccessLevel {
  Collaborator
  Viewer
}

enum AlbumType {
  Album
  Compilation
  Single
}

enum EntityType {
  Album
  Artist
  Playlist
  Track
}

enum Modality {
  Major
  Minor
  NoResult
}

enum ReleaseDatePrecision {
  Day
  Month
  Year
}

input CreateCommentInput {
  reviewId: ID!
  parentCommentId: Long
  comment: String!
  entities: [ReviewEntityInput!]!
  commentIndex: Int
}

input CreateReviewInput {
  name: String!
  isPublic: Boolean!
  entity: ReviewEntityInput
  link: InitialLinkInput
}

input DeleteCommentInput {
  reviewId: ID!
  commentId: Long!
}

input DeleteReviewInput {
  id: ID!
}

input DeleteReviewLinkInput {
  parentReviewId: ID!
  childReviewId: ID!
}

input GetPlaylistTracksInput {
  playlistId: String!
  numTracks: Int!
}

input InitialLinkInput {
  parentReviewId: ID!
}

input LinkReviewsInput {
  parentReviewId: ID!
  childReviewId: ID!
  linkIndex: Int
}

input PaginationInput {
  first: Int!
  offset: Int! = 0
}

input ReviewEntityInput {
  entityType: EntityType!
  entityId: String!
}

input ShareReviewInput {
  reviewId: ID!
  userId: String!
  "If not specified user will have access revoked."
  accessLevel: AccessLevel
}

input UpdateCommentIndexInput {
  commentId: Int!
  reviewId: ID!
  index: Int!
}

input UpdateCommentInput {
  commentId: Long!
  reviewId: ID!
  comment: String!
}

input UpdateReviewEntityInput {
  reviewId: ID!
  entityType: EntityType!
  entityId: String!
}

input UpdateReviewInput {
  reviewId: ID!
  name: String!
  isPublic: Boolean!
}

input UpdateReviewLinkInput {
  parentReviewId: ID!
  childReviewId: ID!
  linkIndex: Int!
}

interface ReviewEntity {
  name: String!
  uri: String!
  id: String!
  href: String!
}

type Album implements ReviewEntity {
  href: String!
  id: String!
  uri: String!
  name: String!
  albumType: AlbumType!
  availableMarkets: [String!]!
  releaseDate: String!
  releaseDatePrecision: ReleaseDatePrecision!
  images: [String!]!
  externalUrls: [KVStringString!]
  externalIds: ExternalIds
  copyrights: [Copyright!]
  genres: [String!]
  label: String
  popularity: Int
  artists: [Artist!]
  tracks: [Track!]
}

type Artist implements ReviewEntity {
  href: String!
  id: String!
  uri: String!
  name: String!
  numFollowers: Int
  genres: [String!]
  images: [String!]
  popularity: Int
  albums: [Album!]
  topTracks: [Track!]
}

type AudioAnalysis {
  bars: [TimeInterval!]!
  beats: [TimeInterval!]!
  tatums: [TimeInterval!]!
  sections: [AudioSection!]!
  segments: [AudioSegment!]!
}

type AudioFeatures {
  acousticness: Float!
  analysisUrl: String!
  danceability: Float!
  durationMs: Int!
  energy: Float!
  id: String!
  instrumentalness: Float!
  key: Int!
  liveness: Float!
  loudness: Float!
  mode: Int!
  speechiness: Float!
  tempo: Float!
  timeSignature: Int!
  trackHref: String!
  type: String!
  uri: String!
  valence: Float!
}

type AudioSection {
  start: Float!
  duration: Float!
  confidence: Float!
  loudness: Float!
  tempo: Int!
  tempoConfidence: Float!
  key: Float!
  keyConfidence: Float!
  mode: Modality!
  modeConfidence: Float!
  timeSignature: Float!
  timeSignatureConfidence: Float!
}

type AudioSegment {
  start: Float!
  duration: Float!
  confidence: Float!
  loudnessStart: Float!
  loudnessMax: Float!
  loudnessMaxTime: Float!
  loudnessEnd: Float
  pitches: [Float!]!
  timbre: [Float!]!
}

type Collaborator {
  user: User!
  accessLevel: AccessLevel!
  review: Review
}

type Comment {
  id: Long!
  commentIndex: Int!
  reviewId: ID!
  createdAt: Instant!
  updatedAt: Instant!
  deleted: Boolean!
  parentCommentId: Long
  childCommentIds: [Long!]!
  commenter: User!
  comment: String
  entities: [ReviewEntity!]
}

type Copyright {
  text: String!
  type: String!
}

type CreatedComment {
  comment: Comment!
}

type DeletedComment {
  reviewId: ID!
  commentId: Long!
}

type ExternalIds {
  isrc: String
  ean: String
  upc: String
}

"A key-value pair of String and String"
type KVStringString {
  "Key"
  key: String!
  "Value"
  value: String!
}

type Mutations {
  createReview(input: CreateReviewInput!): Review
  createComment(input: CreateCommentInput!): Comment
  linkReviews(input: LinkReviewsInput!): Boolean
  updateReviewLink(input: UpdateReviewLinkInput!): Boolean
  updateReview(input: UpdateReviewInput!): Review
  updateReviewEntity(input: UpdateReviewEntityInput!): Review
  updateComment(input: UpdateCommentInput!): Comment
  updateCommentIndex(input: UpdateCommentIndexInput!): Boolean
  deleteReview(input: DeleteReviewInput!): Boolean
  deleteComment(input: DeleteCommentInput!): Boolean
  deleteReviewLink(input: DeleteReviewLinkInput!): Boolean
  shareReview(input: ShareReviewInput!): Boolean
}

type NewCommentIndex {
  commentId: Long!
  commentIndex: Int!
}

type PaginationResultAlbum {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Album!]!
}

type PaginationResultArtist {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Artist!]!
}

type PaginationResultPlaylist {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Playlist!]!
}

type PaginationResultTrack {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Track!]!
}

type PlaybackContext {
  uri: String!
  metadata: [KVStringString!]
  externalUrls: [KVStringString!]!
  href: String!
  type: String!
}

type PlaybackDevice {
  id: String!
  isActive: Boolean!
  isPrivateSession: Boolean!
  isRestricted: Boolean!
  name: String!
  type: String!
  volumePercent: Int!
}

type PlaybackState {
  device: PlaybackDevice!
  shuffleState: Boolean!
  repeatState: String!
  timestamp: Long!
  context: PlaybackContext
  progressMs: Long!
  item: Track
  currentlyPlayingType: String!
  isPlaying: Boolean!
}

type Playlist implements ReviewEntity {
  href: String!
  id: String!
  uri: String!
  name: String!
  collaborative: Boolean!
  public: Boolean
  description: String
  numberOfTracks: Int!
  externalUrls: [KVStringString!]!
  images: [String!]!
  owner: User!
  snapshotId: String
  numberOfFollowers: Int
  tracks: [PlaylistTrack!]
}

type PlaylistTrack {
  addedAt: Instant!
  addedBy: User!
  isLocal: Boolean!
  track: Track!
  playlist: Playlist!
}

type Queries {
  user(id: String): User!
  userMaybe(id: String): User
  searchUser(displayName: String!): [User!]
  review(id: ID!): Review
  reviews(reviewIds: [ID!]!): [Review!]
  search(query: String!, types: [EntityType!]!, pagination: PaginationInput = {first: 10, offset: 0}): SearchResult
  getPlaylist(id: String!): Playlist
  getAlbum(id: String!): Album
  getTrack(id: String!): Track
}

type Restrictions {
  reason: String!
}

type Review {
  id: ID!
  createdAt: Instant!
  creator: User!
  reviewName: String!
  isPublic: Boolean!
  comments: [Comment!]
  entity: ReviewEntity
  childReviews: [Review!]
  collaborators: [Collaborator!]
}

type SearchResult {
  albums: PaginationResultAlbum
  artists: PaginationResultArtist
  playlists: PaginationResultPlaylist
  tracks: PaginationResultTrack
}

type SpotifyProfile {
  id: String!
  displayName: String
  href: String!
  uri: String!
  externalUrls: [KVStringString!]!
  images: [String!]!
  numFollowers: Int
}

type Subscriptions {
  nowPlaying(tickInterval: Int!): PlaybackState
  availableDevices: [PlaybackDevice!]
  playlistTracks(input: GetPlaylistTracksInput!): PlaylistTrack
  reviewUpdates(reviewIds: [ID!]!): ReviewUpdate
}

type TimeInterval {
  start: Float!
  duration: Float!
  confidence: Float!
}

type Track implements ReviewEntity {
  href: String!
  id: String!
  uri: String!
  name: String!
  durationMs: Int!
  discNumber: Int!
  trackNumber: Int!
  explicit: Boolean!
  isLocal: Boolean!
  isPlayable: Boolean
  previewUrl: String
  externalIds: ExternalIds
  restrictions: Restrictions
  artists: [Artist!]!
  externalUrls: [KVStringString!]
  availableMarkets: [String!]
  popularity: Int
  album: Album
  isLiked: Boolean
  audioAnalysis: AudioAnalysis
  audioFeatures: AudioFeatures
}

type UpdatedComment {
  comment: Comment!
}

type UpdatedCommentIndex {
  reviewId: ID!
  updatedIndices: [NewCommentIndex!]!
}

type User {
  id: String!
  reviews: [Review!]
  spotifyProfile: SpotifyProfile
  playlists(pagination: PaginationInput): [Playlist!]
}