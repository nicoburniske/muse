schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

"An instantaneous point on the time-line represented by a standard date time string"
scalar Instant

scalar Long

enum AccessLevel {
  Collaborator
  Viewer
}

enum EntityType {
  Album
  Artist
  Playlist
  Track
}

input ContextInput {
  entityType: EntityType!
  entityId: String!
}

input CreateCommentInput {
  reviewId: ID!
  parentCommentId: Int
  comment: String
  rating: Int
  entityType: EntityType!
  entityId: String!
}

input CreateReviewInput {
  name: String!
  isPublic: Boolean!
  entityType: EntityType!
  entityId: String!
}

input DeleteCommentInput {
  reviewId: ID!
  commentId: Int!
}

input DeleteReviewInput {
  id: ID!
}

input EntityOffsetInput {
  outer: ContextInput!
  inner: ContextInput!
}

input PaginationInput {
  first: Int!
  from: Int! = 0
}

input PositionOffsetInput {
  context: ContextInput!
  position: Int!
}

input ShareReviewInput {
  reviewId: ID!
  userId: String!
  access: AccessLevel!
}

input StartPlaybackInput {
  "If device id is specified, playback will be transferred to that device. Otherwise, playback will be executed on user's active device."
  deviceId: String
  uris: [String!]
  positionOffset: PositionOffsetInput
  entityOffset: EntityOffsetInput
  positionMs: Int
}

input UpdateCommentInput {
  commentId: Int!
  reviewId: ID!
  comment: String
  rating: Int
}

input UpdateReviewInput {
  reviewId: ID!
  name: String!
  isPublic: Boolean!
}

interface ReviewEntity {
  name: String!
  uri: String!
  id: String!
  externalUrls: [KVStringString!]!
}

type Album implements ReviewEntity {
  albumGroup: String
  albumType: String!
  externalUrls: [KVStringString!]!
  genres: [String!]!
  id: String!
  images: [String!]!
  label: String
  name: String!
  popularity: Int
  releaseDate: String!
  uri: String!
  artists: [Artist!]
  tracks: [Track!]
}

type Artist implements ReviewEntity {
  externalUrls: [KVStringString!]!
  numFollowers: Int!
  genres: [String!]!
  href: String!
  id: String!
  images: [String!]!
  name: String!
  uri: String!
  popularity: Int!
  albums: [Album!]
  topTracks: [Track!]
}

type Collaborator {
  user: User!
  accessLevel: AccessLevel!
}

type Comment {
  id: Int!
  reviewId: ID!
  createdAt: Instant!
  updatedAt: Instant!
  parentCommentId: Int
  commenterId: String!
  commenter: User
  comment: String
  rating: Int
  entityId: String!
  entityType: EntityType!
  entity: ReviewEntity
}

"A key-value pair of String and String"
type KVStringString {
  "Key"
  key: String!
  "Value"
  value: String!
}

type Mutations {
  createReview(input: CreateReviewInput!): Review
  createComment(input: CreateCommentInput!): Comment
  updateReview(input: UpdateReviewInput!): Boolean
  updateComment(input: UpdateCommentInput!): Boolean
  deleteReview(input: DeleteReviewInput!): Boolean
  deleteComment(input: DeleteCommentInput!): Boolean
  shareReview(input: ShareReviewInput!): Boolean
  startPlayback(input: StartPlaybackInput!): Boolean
  saveTracks(input: [String!]!): Boolean
}

type PlaybackContext {
  uri: String!
  metadata: [KVStringString!]
  externalUrls: [KVStringString!]!
  href: String!
  type: String!
}

type PlaybackDevice {
  id: String!
  isActive: Boolean!
  isPrivateSession: Boolean!
  isRestricted: Boolean!
  name: String!
  type: String!
  volumePercent: Int!
}

type PlaybackState {
  device: PlaybackDevice!
  shuffleState: Boolean!
  repeatState: String!
  timestamp: Long!
  context: PlaybackContext!
  progressMs: Long!
  item: Track!
  currentlyPlayingType: String!
  isPlaying: Boolean!
}

type Playlist implements ReviewEntity {
  collaborative: Boolean!
  description: String!
  externalUrls: [KVStringString!]!
  id: String!
  images: [String!]!
  name: String!
  uri: String!
  owner: User!
  primaryColor: String
  public: Boolean
  tracks: [PlaylistTrack!]
}

type PlaylistTrack {
  addedAt: Instant!
  addedBy: User!
  isLocal: Boolean!
  track: Track!
}

type Queries {
  user(id: String): User
  review(id: ID!): Review
  search(query: String!, types: [EntityType!]!, pagination: PaginationInput = {first: 10, from: 0}): SearchResult
  availableDevices: [PlaybackDevice!]
}

type Review {
  id: ID!
  createdAt: Instant!
  creator: User!
  reviewName: String!
  isPublic: Boolean!
  comments: [Comment!]
  entityId: String!
  entityType: EntityType!
  entity: ReviewEntity!
  collaborators: [Collaborator!]
}

type SearchResult {
  albums: [Album!]!
  artists: [Artist!]!
  playlists: [Playlist!]!
  tracks: [Track!]!
}

type SpotifyProfile {
  id: String!
  displayName: String
  href: String!
  uri: String!
  externalUrls: [KVStringString!]!
  images: [String!]
  numFollowers: Int
}

type Subscriptions {
  nowPlaying: PlaybackState
  availableDevices: [PlaybackDevice!]
}

type Track implements ReviewEntity {
  album: Album
  artists: [Artist!]
  discNumber: Int!
  durationMs: Int!
  explicit: Boolean!
  externalUrls: [KVStringString!]!
  href: String!
  id: String!
  isPlayable: Boolean
  name: String!
  popularity: Int
  previewUrl: String
  trackNumber: Int!
  isLocal: Boolean!
  uri: String!
  isLiked: Boolean
}

type User {
  id: String!
  reviews: [Review!]
  spotifyProfile: SpotifyProfile
}