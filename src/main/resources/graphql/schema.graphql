schema {
  query: Queries
  mutation: Mutations
  subscription: Subscriptions
}

"An instantaneous point on the time-line represented by a standard date time string"
scalar Instant

scalar Long

union ReviewUpdate = CreatedComment | DeletedComment | UpdatedComment

enum AccessLevel {
  Collaborator
  Viewer
}

enum EntityType {
  Album
  Artist
  Playlist
  Track
}

input ContextInput {
  entityType: EntityType!
  entityId: String!
}

input CreateCommentInput {
  reviewId: ID!
  parentCommentId: Int
  comment: String!
  entities: [ReviewEntityInput!]!
  commentIndex: Int
}

input CreateReviewInput {
  name: String!
  isPublic: Boolean!
  entity: ReviewEntityInput
  link: InitialLinkInput
}

input DeleteCommentInput {
  reviewId: ID!
  commentId: Int!
}

input DeleteReviewInput {
  id: ID!
}

input DeleteReviewLinkInput {
  parentReviewId: ID!
  childReviewId: ID!
}

input EntityOffsetInput {
  outer: ContextInput!
  inner: ContextInput!
}

input GetPlaylistTracksInput {
  playlistId: String!
  numTracks: Int!
}

input InitialLinkInput {
  parentReviewId: ID!
}

input LinkReviewsInput {
  parentReviewId: ID!
  childReviewId: ID!
  linkIndex: Int
}

input PaginationInput {
  first: Int!
  offset: Int! = 0
}

input PlayEntityContextInput {
  offset: EntityOffsetInput!
  positionMs: Int
  deviceId: String
}

input PlayInput {
  deviceId: String
}

input PlayOffsetContextInput {
  offset: PositionOffsetInput!
  positionMs: Int
  deviceId: String
}

input PlayTracksInput {
  trackIds: [String!]!
  positionMs: Int
  deviceId: String
}

input PositionOffsetInput {
  context: ContextInput!
  position: Int!
}

input ReviewEntityInput {
  entityType: EntityType!
  entityId: String!
}

input SearchUserPlaylistsInput {
  pagination: PaginationInput!
  search: String
}

input SeekPlaybackInput {
  deviceId: String
  positionMs: Int!
}

input ShareReviewInput {
  reviewId: ID!
  userId: String!
  "If not specified user will have access revoked."
  accessLevel: AccessLevel
}

input TransferPlaybackInput {
  deviceId: String!
  play: Boolean
}

input UpdateCommentInput {
  commentId: Int!
  reviewId: ID!
  comment: String
}

input UpdateReviewEntityInput {
  reviewId: ID!
  entityType: EntityType!
  entityId: String!
}

input UpdateReviewInput {
  reviewId: ID!
  name: String!
  isPublic: Boolean!
}

input UpdateReviewLinkInput {
  parentReviewId: ID!
  childReviewId: ID!
  linkIndex: Int!
}

interface ReviewEntity {
  name: String!
  uri: String!
  id: String!
  externalUrls: [KVStringString!]!
}

type Album implements ReviewEntity {
  albumGroup: String
  albumType: String!
  externalUrls: [KVStringString!]!
  genres: [String!]!
  id: String!
  images: [String!]!
  label: String
  name: String!
  popularity: Int
  releaseDate: String!
  uri: String!
  artists: [Artist!]
  tracks: [Track!]
}

type Artist implements ReviewEntity {
  externalUrls: [KVStringString!]!
  numFollowers: Int
  genres: [String!]
  href: String!
  id: String!
  images: [String!]
  name: String!
  uri: String!
  popularity: Int
  albums: [Album!]
  topTracks: [Track!]
}

type AudioFeatures {
  acousticness: Float!
  analysisUrl: String!
  danceability: Float!
  durationMs: Int!
  energy: Float!
  id: String!
  instrumentalness: Float!
  key: Int!
  liveness: Float!
  loudness: Float!
  mode: Int!
  speechiness: Float!
  tempo: Float!
  timeSignature: Int!
  trackHref: String!
  type: String!
  uri: String!
  valence: Float!
}

type Collaborator {
  user: User!
  accessLevel: AccessLevel!
}

type Comment {
  id: Int!
  commentIndex: Int!
  reviewId: ID!
  createdAt: Instant!
  updatedAt: Instant!
  parentCommentId: Int
  commenter: User!
  comment: String
  entities: [ReviewEntity!]
}

type CreatedComment {
  comment: Comment!
}

type DeletedComment {
  reviewId: ID!
  commentId: Int!
}

"A key-value pair of String and String"
type KVStringString {
  "Key"
  key: String!
  "Value"
  value: String!
}

type Mutations {
  createReview(input: CreateReviewInput!): Review
  createComment(input: CreateCommentInput!): Comment
  linkReviews(input: LinkReviewsInput!): Boolean
  updateReviewLink(input: UpdateReviewLinkInput!): Boolean
  updateReview(input: UpdateReviewInput!): Review
  updateReviewEntity(input: UpdateReviewEntityInput!): Review
  updateComment(input: UpdateCommentInput!): Comment
  deleteReview(input: DeleteReviewInput!): Boolean
  deleteComment(input: DeleteCommentInput!): Boolean
  deleteReviewLink(input: DeleteReviewLinkInput!): Boolean
  shareReview(input: ShareReviewInput!): Boolean
  play(input: PlayInput!): Boolean
  transferPlayback(input: TransferPlaybackInput!): Boolean
  playTracks(input: PlayTracksInput!): Boolean
  playOffsetContext(input: PlayOffsetContextInput!): Boolean
  playEntityContext(input: PlayEntityContextInput!): Boolean
  seekPlayback(input: SeekPlaybackInput!): Boolean
  pausePlayback(deviceId: String): Boolean
  skipToNext(deviceId: String): Boolean
  skipToPrevious(deviceId: String): Boolean
  toggleShuffle(input: Boolean!): Boolean
  saveTracks(input: [String!]!): Boolean
  removeSavedTracks(input: [String!]!): Boolean
}

type PaginationResultAlbum {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Album!]!
}

type PaginationResultArtist {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Artist!]!
}

type PaginationResultPlaylist {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Playlist!]!
}

type PaginationResultTrack {
  limit: Int!
  nextOffset: Int
  itemsLeft: Int!
  items: [Track!]!
}

type PlaybackContext {
  uri: String!
  metadata: [KVStringString!]
  externalUrls: [KVStringString!]!
  href: String!
  type: String!
}

type PlaybackDevice {
  id: String!
  isActive: Boolean!
  isPrivateSession: Boolean!
  isRestricted: Boolean!
  name: String!
  type: String!
  volumePercent: Int!
}

type PlaybackState {
  device: PlaybackDevice!
  shuffleState: Boolean!
  repeatState: String!
  timestamp: Long!
  context: PlaybackContext
  progressMs: Long!
  item: Track
  currentlyPlayingType: String!
  isPlaying: Boolean!
}

type Playlist implements ReviewEntity {
  collaborative: Boolean!
  description: String!
  externalUrls: [KVStringString!]!
  id: String!
  images: [String!]!
  name: String!
  uri: String!
  owner: User!
  primaryColor: String
  public: Boolean
  tracks: [PlaylistTrack!]
}

type PlaylistTrack {
  addedAt: Instant!
  addedBy: User!
  isLocal: Boolean!
  track: Track!
  playlist: Playlist!
}

type Queries {
  user(id: String): User
  review(id: ID!): Review
  search(query: String!, types: [EntityType!]!, pagination: PaginationInput = {first: 10, offset: 0}): SearchResult
  availableDevices: [PlaybackDevice!]
  getPlaylist(id: String!): Playlist
  getAlbum(id: String!): Album
  getTrack(id: String!): Track
}

type Review {
  id: ID!
  createdAt: Instant!
  creator: User!
  reviewName: String!
  isPublic: Boolean!
  comments: [Comment!]
  entity: ReviewEntity
  childReviews: [Review!]
  collaborators: [Collaborator!]
}

type SearchResult {
  albums: PaginationResultAlbum
  artists: PaginationResultArtist
  playlists: PaginationResultPlaylist
  tracks: PaginationResultTrack
}

type SpotifyProfile {
  id: String!
  displayName: String
  href: String!
  uri: String!
  externalUrls: [KVStringString!]!
  images: [String!]
  numFollowers: Int
}

type Subscriptions {
  nowPlaying(tickInterval: Int!): PlaybackState
  availableDevices: [PlaybackDevice!]
  playlistTracks(input: GetPlaylistTracksInput!): PlaylistTrack
  reviewUpdates(reviewIds: [ID!]!): ReviewUpdate
}

type Track implements ReviewEntity {
  album: Album
  artists: [Artist!]
  discNumber: Int!
  durationMs: Int!
  explicit: Boolean!
  externalUrls: [KVStringString!]!
  href: String!
  id: String!
  isPlayable: Boolean
  name: String!
  popularity: Int
  previewUrl: String
  trackNumber: Int!
  isLocal: Boolean
  uri: String!
  isLiked: Boolean
  audioFeatures: AudioFeatures
}

type UpdatedComment {
  comment: Comment!
}

type User {
  id: String!
  reviews: [Review!]
  spotifyProfile: SpotifyProfile
  playlists(input: SearchUserPlaylistsInput!): [Playlist!]
}